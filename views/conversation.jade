extends base.jade

block vars
	- var footer = false

block scripts
	script(type='text/javascript').
		$(document).ready(function () {
			var convID = #{conversationID};

			var active = true;

			var socket = io();
			var authors = {};
			var stamps = {};

			var messagesLoaded = 0;

			var $body = $('body');
			var $cursor = $('#cursor');
			var $messagesContainer = $('#messagesContainer');
			var $editMembersButton = $('#editMembers');
			var $drawPanel = $('#drawPanel');
			var $brushSizeRange = $('#brushSizeRange');
			var $hotSwapButton = $('#hotswap');

			$messagesContainer.append('<div class="loader" '
				+ 'style="position:absolute;left:50%;margin-left:-23px;margin-top:50px;"></div>');

			$.get('/conversation/' + convID + '/stamps/').done(function (data) {
				for(var s in data['stamps']) {
					stamps[data['stamps'][s]['id']] = data['stamps'][s];
				}
			});

			$cursor.hide();
			$('#loadMore').hide();

			var $canvas = $('#drawCanvas');
			var drawCanvas = new SWCanvas('drawCanvas');
			
			var hover = false;

			// TODO: Optimize small avatars
			var displayMessage = function (userID, imageData, date, immediate, top) {
				var messageHTML = '<div class="message" id="message-' + '"><div class="topBar"><div class="author">';

				if(authors[userID]['avatar']) {
					messageHTML += '<img src="' + authors[userID]['avatar'] + '">';
				}

				messageHTML += '<span>'
						+ authors[userID]['username'] + '</span></div><div class="date">'
						+ date + '</div></div>'
						+ '<div class="image">'
						+ '<img src="' + imageData + '">'
						+ '</div><div class="controls"><button class="importToCanvas transparent noMargin">'
						+ '<i class="material-icons">gesture</i><span>Bastardize</span></button></div>'
						+ '</div>';

				if (top) {
					$messagesContainer.children('#loadMore').first().after(messageHTML);
				} else {
					$messagesContainer.append(messageHTML);
				}

				if(!top) {
					if (immediate) {
						$messagesContainer.scrollTop($messagesContainer[0].scrollHeight);
					} else {
						$messagesContainer.animate({scrollTop: $messagesContainer[0].scrollHeight.toString() + 'px'});
					}
				}
			};

			var displayMetaMessage = function (message) {
				$messagesContainer.append('<div class="metaMessage">' + message + '</div>');
				$messagesContainer.animate({scrollTop: $messagesContainer[0].scrollHeight.toString() + 'px'});
			};

			var refreshMessages = function (immediate, from, count, top) {
				$.get('/conversation_data/' + convID.toString() + '/from/' + from.toString()
						+ '/count/' + count.toString()).then(function (data) {
					// TODO: If not editing
					$('#convName').text(data['conversation']['name']);

					if (!top) {
						data['messages'].reverse();
					}

					if(data['messages'].length < 10) {
						$('#loadMore').attr('disabled', 'disabled');
						$('#loadMore').addClass('disabled');
					}

					var currentScrollTop = $('.message').first();

					for (var m = 0; m < data['messages'].length; m++) {
						var rawDate = data['messages'][m]['createdAt'];
						var formattedDate = moment(rawDate).format("h:mm A; MMMM D");
						displayMessage(data['messages'][m]['UserId'], data['messages'][m]['imageData'],
								formattedDate, immediate, top);
					}

					messagesLoaded += data['messages'].length;

					if (top) $messagesContainer.scrollTop(currentScrollTop.offset().top - 240);

					// TODO: This is a temporary hack for images being done loading

					if (!top) {
						window.setTimeout(function () {
							$messagesContainer.scrollTop($messagesContainer[0].scrollHeight);
						}, 100);
					}

					// Done loading, get rid of the loading animation thing
					$messagesContainer.children('.loader').first().remove();
					$('#loadMore').show();
				});
			};

			var drawCursor = function (x, y) {
				$cursor.css({'top': (y - 112).toString() + 'px', 'left': x.toString() + 'px'});
			};

			$canvas.on('mousedown', function (event) {
				var mCoords = drawCanvas.calculateMouse(event.pageX, event.pageY);

				drawCanvas.startPainting();

				drawCanvas.addPoint(mCoords.x, mCoords.y, false);
				drawCanvas.redraw();
			});
			$canvas.on('touchstart', function (event) {
				var touch = event.originalEvent.touches[0] || event.originalEvent.changedTouches[0];
				var mCoords = drawCanvas.calculateMouse(touch.pageX, touch.pageY);

				drawCanvas.startPainting();

				drawCanvas.addPoint(mCoords.x, mCoords.y, false);
				drawCanvas.redraw();
			});
			$canvas.on('mousemove', function (event) {
				if (drawCanvas.paint) {
					var mCoords = drawCanvas.calculateMouse(event.pageX, event.pageY);

					drawCanvas.addPoint(mCoords.x, mCoords.y, true);

					// FOR THE FUTURE
					/*if(points.length > 100) {
						imageToBg();
						clearPoints();
					}*/

					drawCanvas.redraw();
				}

				if (hover) {
					drawCursor(event.pageX, event.pageY);
				}
			});
			$canvas.on('touchmove', function (event) {
				event.preventDefault();

				if (drawCanvas.paint) {
					var touch = event.originalEvent.touches[0] || event.originalEvent.changedTouches[0];
					var mCoords = drawCanvas.calculateMouse(touch.pageX, touch.pageY);

					drawCanvas.addPoint(mCoords.x, mCoords.y, true);
					drawCanvas.redraw();
				}
			});

			var onMouseUp = function (event) {
				drawCanvas.stopPainting();
				drawCanvas.imageToBg();
			};

			$canvas.on('mouseup', onMouseUp);
			$canvas.on('touchend', function (event) {
				event.preventDefault();
				onMouseUp(event);
			});
			$canvas.on('mouseleave', function (event) {
				drawCanvas.stopPainting();
				hover = false;
				$cursor.hide();
			});

			$canvas.on('mouseenter', function (event) {
				hover = true;
				$cursor.show();
				drawCursor(event.pageX, event.pageY);
			});

			$('.colorTool').click(function () {
				drawCanvas.updateBrush({
					tool: 'brush',
					color: $(this).css('backgroundColor')
				});

				$brushSizeRange.change(); // Refresh size, make sure it's correct

				$(this).parent().children('li').each(function () { $(this).removeClass('active'); });
				$(this).addClass('active');

				$(this).parent().parent().children('#images').children('li').each(function () {
					$(this).removeClass('active');
				});
			});
			$('.stampTool').click(function () {
				drawCanvas.updateBrush({
					tool: 'stamp',
					stamp: $(this).attr('id')
				});

				$brushSizeRange.change(); // Refresh size, make sure it's correct

				$(this).parent().children('li').each(function () { $(this).removeClass('active'); });
				$(this).addClass('active');

				$(this).parent().parent().children('#colors').children('li').each(function () {
					$(this).removeClass('active');
				});
			});

			$brushSizeRange.on('input change', function () { drawCanvas.setBrushSize($(this).val()); });

			$('#clear').click(function () { drawCanvas.clearAllCanvasData(true); });
			$('#send').click(function () {
				var messageData = {
					imageData: drawCanvas.canvas.toDataURL(),
					conversationID: convID
				};

				drawCanvas.clearAllCanvasData(true);
				socket.emit('newMessage', messageData);
				messagesLoaded++;

				if (window.innerWidth <= 1040) {
					if ($drawPanel.css('left') != '0px') {
						$drawPanel.css({left: '100%'});
					}
				}

				displayMessage('#{user.id}', messageData, moment(Date.now()).format("h:mm A; MMMM D"));
			});

			$('#stampIt').click(function () {
				socket.emit('stampAdd', {
					imageData: drawCanvas.canvas.toDataURL(),
					conversationID: convID
				});

				$body.append('<div id="modalBackground"></div>');
				$body.append('<div id="modal"><h1>Stamp was added!</h1>'
						+ '<button id="okay">Okay</button>'
						+ '</div>');
				$('#okay, #modalBackground').click(function () {
					$('#modal').fadeOut('fast', function () {
						$(this).remove();
					});
					$('#modalBackground').fadeOut('fast', function () {
						$(this).remove();
					});
				});
			});

			$('#hotkey').click(function () {
				var refreshStamps = function () {
					for (var s in stamps) {
						var stampHTML = '<div class="stamp" data-id="' + stamps[s]['id']
								+ '"><img src="' + stamps[s]['imageData'] + '">';
						if (stamps[s]['UserId'] == (#{user.id}).toString()) {
							stampHTML += '<button class="stampDelete transparent noMargin big iconOnly"><i class="material-icons">delete</i></button>';
						}
						stampHTML += '</div>';
						$('#stamps').append(stampHTML);
					}
				};

				$body.append('<div id="modalBackground"></div>');
				$body.append('<div id="modal"><h1><span>User Stamps</span><div class="controls">'
						+ '<button id="closeModal" class="transparent iconOnly big noMargin">'
						+ '<i class="material-icons">clear</i></button></div></h1>'
						+ '<div id="stamps"><div class="stamp"><img src="/images/sciencerules.png"></div></div>'
						+ '</div>');

				refreshStamps();

				$body.on('click', '.stampDelete', function (event) {
					event.stopPropagation();

					// TODO: Are you sure???

					socket.emit('stampRemove', {
						conversationID: convID,
						stampID: $(this).parent().data('id')
					});
					$(this).parent().remove();
				});

				$('#closeModal, #modalBackground').click(function () {
					$('#modal').fadeOut('fast', function () {
						$(this).remove();
					});
					$('#modalBackground').fadeOut('fast', function () {
						$(this).remove();
					});
				});
			});

			$body.on('click', '.stamp', function () {
				$hotSwapButton.children('img').first().attr('src', ($(this).children('img').first().attr('src')));
				$hotSwapButton.click();

				$('#modal').fadeOut('fast', function () {
					$(this).remove();
				});
				$('#modalBackground').fadeOut('fast', function () {
					$(this).remove();
				});
			});

			$body.on('click', '.importToCanvas', function (event) {
				drawCanvas.background = $(this).parent().parent()
						.children('div.image').first().children('img').first().attr('src');
				drawCanvas.clearAllCanvasData(false);
				drawCanvas.redraw();
			});

			$('#changeName').click(function () {
				$('#convName').replaceWith('<input type="text" id="changeNameText" value="'
						+ $('#convName').text() + '">');
				$('#changeNameText').after(' <div id="nameChangeControls"><button id="saveName"><i class="material-icons">done</i><span>Save</span></button>'
						+ '<button id="cancelChange" class="transparent"><i class="material-icons">clear</i><span>Cancel</span></button></div>');
				$('#saveName').click(function () {
					// TODO: Socket send a message that name has changed

					$.ajax({
						url: '/conversation/' + convID + '/',
						method: 'PUT',
						data: {
							name: $('#changeNameText').val()
						}
					}).done(function (data) {
						$('#saveName').remove();
						$('#cancelChange').remove();

						$('#changeNameText').replaceWith('<span id="convName">'
								+ $('#changeNameText').val() + '</span>');
						$('#changeName').removeAttr('disabled');
					});
				});
				$('#cancelChange').click(function () {
					$('#saveName').remove();
					$('#cancelChange').remove();

					$('#changeNameText').replaceWith('<span id="convName">'
							+ $('#changeNameText').val() + '</span>');
					$('#changeName').removeAttr('disabled');
					$('#changeName').show();
				});
				$(this).attr('disabled', 'disabled');
				$(this).hide();
			});

			$editMembersButton.click(function () {
				$body.append('<div id="modalBackground"></div>');
				var modalHTML = '<div id="modal"><h1><span>Edit Members</span><div class="controls">'
						+ '<button id="closeModal" class="transparent iconOnly big noMargin"><i class="material-icons">clear</i>'
						+ '</button></div></h1><div id="members"></div>'
						+ '<select id="addMemberBox">';

				// TODO: Figure out a better way to deal with authorship...
				for(var a in authors) {
					modalHTML += '<option value="' + authors[a]['username'] + '">'
							+ authors[a]['username'] + '</option>';
				}

				modalHTML += '</select> <button id="addMember">'
						+ '<i class="material-icons">person_add</i> Add Member</button><br><br>'
						+ '</div>';

				$body.append(modalHTML);

				var $membersList = $('#members');
				$('#addMemberBox').select2();

				$.get('/conversation_users/' + convID + '/').done(function (data) {
					for (var u in data['users']) {
						$('#members').append('<div class="member" data-username="'
								+ data['users'][u]['username'] + '">' + data['users'][u]['username']
								+ ' <button class="deleteMember iconOnly transparent">'
								+ '<i class="material-icons">clear</i></button></div>');
					}
				});

				$('#addMember').click(function () {
					var usernameToAdd = $('#addMemberBox').val();
					socket.emit('userAdd', { username: usernameToAdd, conversationID: convID });

					$membersList.append('<div class="member" data-username="'
							+ usernameToAdd + '">' + usernameToAdd
							+ ' <button class="deleteMember iconOnly transparent">'
							+ '<i class="material-icons">clear</i></button></div>');
				});

				$body.on('click', '.deleteMember', function () {
					var usernameToRemove = $(this).parent().data('username');
					socket.emit('userRemove', { username: usernameToRemove, conversationID: convID });
					$(this).parent().remove();
				});

				$('#closeModal, #modalBackground').click(function () {
					$('#modal').fadeOut('fast', function () {
						$(this).remove();
					});
					$('#modalBackground').fadeOut('fast', function () {
						$(this).remove();
					});
				});
			});

			$('#toggleCanvas').click(function () {
				if ($drawPanel.css('left') != '0px') {
					$drawPanel.animate({left: 0});
					$(this).text('Messages');
					$drawPanel.focus();
				} else {
					$drawPanel.animate({left: '100%'});
					$(this).text('Draw');
				}
			});

			$('#loadMore').click(function () {
				refreshMessages(true, messagesLoaded, 10, true);
			});

			$(window).resize(function () {
				if (window.innerWidth > 1040) {
					$drawPanel.css({left: '50%'});
				} else {
					if ($drawPanel.css('left') != '0px') {
						$drawPanel.css({left: '100%'});
					}
				}
			});

			$(window).on('beforeunload', function (event) {
				onMouseUp(event);
				socket.emit('removeUser', {user: #{user.id}, conversationID: convID});
				socket.disconnect();
			});

			window.setInterval(function () {
				if(active) {
					// Keep session alive
					$.get('/keepalive/');
				}
			}, 10000);

			// -----------------

			$brushSizeRange.change();

			socket.emit('userJoin', { user: #{user.id}, conversationID: convID});

			// TODO: Handle add/remove with sockets
			$.get('/users_data/').done(function (data) {
				authors = data['users'];
				refreshMessages(true, 0, 50, false);
			});

			if (Notification.permission !== 'denied' && Notification.permission !== 'granted') {
				Notification.requestPermission();
			}

			socket.on('newMessage', function (data) {
				if(parseInt(data['ConversationId']) == convID) {
					var rawDate = data['createdAt'];
					var formattedDate = moment(rawDate).format("h:mm A; MMMM D");

					displayMessage(data['UserId'], data['imageData'], formattedDate);

					if (!document.hasFocus() && authors[data['UserId']] != #{user.id}) {
						if (Notification.permission === 'granted') {
							// TODO: Notification toggle
							var notification = new Notification(authors[data['UserId']]['username'] + ' sent a sketch!');
						} else if (Notification.permission !== 'denied') {
							Notification.requestPermission(function (permission) {
								var notification = new Notification(authors[data['UserId']]['username'] + ' sent a sketch!');
							});
						}
					}
				}
			});

			socket.on('stampAdd', function (stamp) {
				stamps[stamp['id']] = stamp;
			});
			socket.on('stampRemove', function (stamp) {
				delete stamps[stamp];
			});

			socket.on('changeName', function (name) {
				// TODO: Incorporate whether or not it's being edited...

				displayMetaMessage('The conversation name was changed to "' + name + '"');
			});

			socket.on('userAdd', function (data) {
				authors[data.id] = data;
				displayMetaMessage(data.username + ' was added to the conversation.');
			});
			socket.on('userRemove', function (data) {
				delete authors[data.id];
				displayMetaMessage(data.username + ' was removed from the conversation.');
			});

			socket.on('userJoin', function (data) {
				// TODO: Some form of indication that the user is viewing the chat
			});
			socket.on('userLeave', function (data) {
				// TODO: Some form of indication that the user is no longer viewing the chat
			});
		});


block content
	img#cursor(width='100', height='57', src='/images/cursor.png')
	button#toggleCanvas Draw

	div#conversation
		section#messages
			header
				h1
					span#convName
					div#controls
						button#changeName.transparent
							i.material-icons edit
							span Change Name
						button#editMembers.transparent
							i.material-icons people
							span Members
			section#messagesContainer
				button#loadMore Load More

		section#drawPanel
			div#scrollIt
				canvas#drawCanvas(height='320', width='480', style='width: 480px; height: 320px;')

				div#tools
					ul#colors
						li#white.colorTool
						li#grey.colorTool
						li#black.colorTool
						li#red.colorTool.active
						li#hotPink.colorTool
						li#yellow.colorTool
						li#blue.colorTool
						li#green.colorTool

					ul#images
						li#dolphin.big.stampTool
							img(src='/images/dolphin.png')
						li#hand.big.stampTool
							img(src='/images/hand.png')
						li#pizza.big.stampTool
							img(src='/images/pizza.png')
						li#gabe.big.stampTool
							img(src='/images/gabe.png')
						li#hotswap.big.stampTool
							img(src='/images/sciencerules.png')
						li#hotkey.big
							i.material-icons collections

					div#brushSize
						h3 Brush Size
						input#brushSizeRange(type='range', min='1', max='100', value='10')

			div#commands
				div(style='float: left;')
					button#stampIt
						i.material-icons image
						span Stamp It!
				div(style='float: right;')
					button#clear.transparent.big.borderRight
						i.material-icons clear
						span Clear
					button#send.iconOnly.transparent.big.highlight
						i.material-icons send
