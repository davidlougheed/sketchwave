extends base.jade

block scripts
	script(type='text/javascript').
		$(document).ready(function () {
			var socket = io();
			var authors = {};

			$.get('/users_data/').done(function (data) {
				authors = data['users'];
			});

			var convID = #{conversationID};

			var $body = $('body');
			var $cursor = $('#cursor');
			var $messagesContainer = $('#messagesContainer');
			var $editMembersButton = $('#editMembers');
			var $drawPanel = $('#drawPanel');
			var $brushSizeRange = $('#brushSizeRange');
			var $hotSwapButton = $('#hotswap');

			$cursor.hide();

			var drawCanvas = document.getElementById('drawCanvas');
			var ctx = drawCanvas.getContext('2d');
			ctx.mozImageSmoothingEnabled = false;
			ctx.webkitImageSmoothingEnabled = false;
			ctx.msImageSmoothingEnabled = false;
			ctx.imageSmoothingEnabled = false;
			var paint = false;
			var hover = false;

			var brushColor = '#ff0000';
			var brushSize = 5;
			var toolType = 'brush';
			var stamp = 'dolphin';

			var clickX = [];
			var clickY = [];
			var clickDrag = [];
			var clickColor = [];
			var clickSize = [];
			var tool = [];

			var stamps = [];

			var background = null;

			var pastMessages = 0;

			var displayMessage = function (username, imageData, date, immediate) {
				$messagesContainer.append('<div class="message">'
						+ '<div class="topBar"><div class="author">' + username + '</div><div class="date">'
						+ date + '</div></div>'
						+ '<div class="image">'
						+ '<img src="' + imageData + '">'
						+ '</div><div class="controls"><button class="importToCanvas transparent noMargin">'
						+ '<i class="material-icons">gesture</i><span>Bastardize</span></button></div>'
						+ '</div>');

				if (immediate) {
					$messagesContainer.scrollTop($messagesContainer[0].scrollHeight);
				} else {
					$messagesContainer.animate({scrollTop: $messagesContainer[0].scrollHeight.toString() + 'px'});
				}
			};

			var clearAllCanvasData = function (backgroundClear) {
				ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
				clickX = [];
				clickY = [];
				clickDrag = [];
				clickColor = [];
				clickSize = [];
				tool = [];
				stamps = [];
				if (backgroundClear) {
					background = null;
				}
			};

			var moveImageDataToBg = function () {
				background = drawCanvas.toDataURL();
			};

			var refreshMessages = function (immediate) {
				$.get('/conversation_data/' + convID.toString()).then(function (data) {
					// TODO: If not editing
					$('#convName').text(data['conversation']['name']);

					if (data['messages'].length > pastMessages) {
						for (var m = pastMessages; m < data['messages'].length; m++) {
							var rawDate = data['messages'][m]['createdAt'];
							var formattedDate = moment(rawDate).format("h:mm A; MMMM D");
							displayMessage(authors[data['messages'][m]['UserId']]['username'],
									data['messages'][m]['imageData'], formattedDate, immediate);
						}

						pastMessages = data['messages'].length;
					}
				});
			};

			var redraw = function () {
				ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
				if (background) {
					var bgImage = document.createElement('img');
					bgImage.setAttribute('src', background);
					ctx.drawImage(bgImage, 0, 0, 480, 320);
				}
				ctx.lineJoin = 'round';

				for (var i = 0; i < clickX.length; i++) {
					if (tool[i] == 'brush') {
						// make brush size feel more natural
						ctx.lineWidth = (Math.pow(clickSize[i] / 320, 1.75) * 160) + 1;
						ctx.strokeStyle = clickColor[i];

						ctx.beginPath();

						if (clickDrag[i] && i != 0) {
							ctx.moveTo(clickX[i - 1], clickY[i - 1]);
						} else {
							ctx.moveTo(clickX[i] - 1, clickY[i]);
						}

						ctx.lineTo(clickX[i], clickY[i]);
						ctx.closePath();
						ctx.stroke();
					} else {
						if (stamps[i]) {
							if (stamps[i] == 'hotswap') {
								ctx.drawImage($('#' + stamps[i] + ' img')[0], clickX[i] - Math.round(size / 2),
										clickY[i] - Math.round(size / 3), size, size * (2.0 / 3.0));
							} else {
								ctx.drawImage($('#' + stamps[i] + ' img')[0], clickX[i] - (clickSize[i] / 2),
										clickY[i] - (clickSize[i] / 2), clickSize[i], clickSize[i]);
							}
						}
					}
				}
			};

			var addPoint = function (x, y, dragging) {
				clickX.push(x);
				clickY.push(y);
				clickDrag.push(dragging);
				clickColor.push(brushColor);
				clickSize.push(brushSize);

				tool.push(toolType);

				if (toolType == 'brush') {
					stamps.push(null);
				} else {
					stamps.push(stamp);
				}
			};

			var drawCursor = function (x, y) {
				$cursor.css({'top': (y - 112).toString() + 'px', 'left': x.toString() + 'px'});
			};

			$(drawCanvas).on('mousedown', function (event) {
				var mouseX = event.pageX - $(this).offset().left;
				var mouseY = event.pageY - $(this).offset().top;

				paint = true;

				addPoint(mouseX, mouseY, false);
				redraw();
			});
			$(drawCanvas).on('touchstart', function (event) {
				var touch = event.originalEvent.touches[0] || event.originalEvent.changedTouches[0];

				var mouseX = touch.pageX - $(this).offset().left;
				var mouseY = touch.pageY - $(this).offset().top;

				paint = true;

				addPoint(mouseX, mouseY, false);
				redraw();
			});
			$(drawCanvas).on('mousemove', function (event) {
				if (paint) {
					var mouseX = event.pageX - $(this).offset().left;
					var mouseY = event.pageY - $(this).offset().top;

					addPoint(mouseX, mouseY, true);
					redraw();
				}

				if (hover) {
					drawCursor(event.pageX, event.pageY);
				}
			});
			$(drawCanvas).on('touchmove', function (event) {
				event.preventDefault();

				if (paint) {
					var touch = event.originalEvent.touches[0] || event.originalEvent.changedTouches[0];

					var mouseX = touch.pageX - $(this).offset().left;
					var mouseY = touch.pageY - $(this).offset().top;

					addPoint(mouseX, mouseY, true);
					redraw();
				}
			});

			var onMouseUp = function (event) {
				paint = false;
				moveImageDataToBg();
				if (background) {
					var bgImage = document.createElement('img');
					bgImage.setAttribute('src', background);
					bgImage.onload = function () {
						clearAllCanvasData(false);
						ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
						ctx.drawImage(bgImage, 0, 0, 480, 320);
					};
				}
			};

			$(drawCanvas).on('mouseup', onMouseUp);
			$(drawCanvas).on('touchend', function (event) {
				event.preventDefault();

				onMouseUp(event);
			});
			$(drawCanvas).on('mouseleave', function (event) {
				paint = false;
				hover = false;
				$cursor.hide();
			});

			$(drawCanvas).on('mouseenter', function (event) {
				var mouseX = event.pageX - $(this).offset().left;
				var mouseY = event.pageY - $(this).offset().top;

				hover = true;
				$cursor.show();
				drawCursor(event.pageX, event.pageY);
			});

			$('.colorTool').click(function () {
				toolType = 'brush';
				brushColor = $(this).css('backgroundColor');

				$brushSizeRange.change(); // Refresh size, make sure it's correct

				$(this).parent().children('li').each(function () {
					$(this).removeClass('active');
				});
				$(this).addClass('active');

				$(this).parent().parent().children('#images').children('li').each(function () {
					$(this).removeClass('active');
				});
			});
			$('.stampTool').click(function () {
				toolType = 'stamp';
				stamp = $(this).attr('id');

				$brushSizeRange.change(); // Refresh size, make sure it's correct

				$(this).parent().children('li').each(function () {
					$(this).removeClass('active');
				});
				$(this).addClass('active');

				$(this).parent().parent().children('#colors').children('li').each(function () {
					$(this).removeClass('active');
				});
			});

			$brushSizeRange.on('input change', function () {
				brushSize = Math.round(($(this).val() / 100.0) * 320);
			});

			$('#clear').click(function () {
				clearAllCanvasData(true);
			});
			$('#send').click(function () {
				var messageData = {
					'imageData': drawCanvas.toDataURL(),
					'conversationID': convID
				};

				clearAllCanvasData(true);
				socket.emit('newMessage', messageData);

				displayMessage('#{user.username}', messageData.imageData, moment(Date.now()).format("h:mm A; MMMM D"));
			});

			$('#stampIt').click(function () {
				var messageData = {
					'imageData': drawCanvas.toDataURL(),
					'conversationID': convID
				};

				$.post('/stamp/', messageData).done(function (data) {
					$body.append('<div id="modalBackground"></div>');
					$body.append('<div id="modal"><h1>Stamp was added!</h1>'
							+ '<button id="okay">Okay</button>'
							+ '</div>');
					$('#okay').click(function () {
						$('#modal').fadeOut('fast', function () {
							$(this).remove();
						});
						$('#modalBackground').fadeOut('fast', function () {
							$(this).remove();
						});
					});
				});
			});

			$('#hotkey').click(function () {
				var refreshStamps = function () {
					$.post('/stamps/', {conversationID: convID}).done(function (data) {
						for (var s in data['stamps']) {
							var stampHTML = '<div class="stamp" data-id="' + data['stamps'][s]['id']
									+ '"><img src="' + data['stamps'][s]['imageData'] + '">';
							if (data['stamps'][s]['UserId'] == (#{user.id}).toString()) {
								stampHTML += '<button class="stampDelete">Delete</button>';
							}
							stampHTML += '</div>';
							$('#stamps').append(stampHTML);
						}
					});
				};

				$body.append('<div id="modalBackground"></div>');
				$body.append('<div id="modal"><h1>User Stamps</h1>'
						+ '<div id="stamps"><div class="stamp"><img src="/images/sciencerules.png"></div></div>'
						+ '<button id="cancel">Cancel</button>'
						+ '</div>');

				refreshStamps();

				$body.on('click', '.stampDelete', function (event) {
					event.stopPropagation();
					$.ajax({
						url: '/stamp/' + $(this).parent().data('id') + '/',
						method: 'DELETE'
					}).done(function (data) {
						$('#stamps').html('<div class="stamp"><img src="/images/sciencerules.png"></div>');
						refreshStamps();
					});
				});

				$('#cancel').click(function () {
					$('#modal').fadeOut('fast', function () {
						$(this).remove();
					});
					$('#modalBackground').fadeOut('fast', function () {
						$(this).remove();
					});
				});
			});

			$body.on('click', '.stamp', function () {
				$hotSwapButton.children('img').first().attr('src', ($(this).children('img').first().attr('src')));
				$hotSwapButton.click();

				$('#modal').fadeOut('fast', function () {
					$(this).remove();
				});
				$('#modalBackground').fadeOut('fast', function () {
					$(this).remove();
				});
			});

			$body.on('click', '.importToCanvas', function (event) {
				background = $(this).parent().parent()
						.children('div.image').first().children('img').first().attr('src');
				clearAllCanvasData(false);
				redraw();
			});

			$('#changeName').click(function () {
				$('#convName').replaceWith('<input type="text" id="changeNameText" value="'
						+ $('#convName').text() + '">');
				$('#changeNameText').after(' <button id="saveName"><i class="material-icons">done</i><span>Save</span></button> '
						+ '<button id="cancelChange" class="transparent"><i class="material-icons">clear</i><span>Cancel</span></button>');
				$('#saveName').click(function () {
					$.ajax({
						url: '/conversation/' + convID + '/',
						method: 'PUT',
						data: {
							name: $('#changeNameText').val()
						}
					}).done(function (data) {
						$('#saveName').remove();
						$('#cancelChange').remove();

						$('#changeNameText').replaceWith('<span id="convName">'
								+ $('#changeNameText').val() + '</span>');
						$('#changeName').removeAttr('disabled');
					});
				});
				$('#cancelChange').click(function () {
					$('#saveName').remove();
					$('#cancelChange').remove();

					$('#changeNameText').replaceWith('<span id="convName">'
							+ $('#changeNameText').val() + '</span>');
					$('#changeName').removeAttr('disabled');
				});
				$(this).attr('disabled', 'disabled');
			});

			$editMembersButton.click(function () {
				$body.append('<div id="modalBackground"></div>');
				$body.append('<div id="modal"><h1>Edit Members</h1>'
						+ '<div id="members"></div>'
						+ '<input type="text" id="addMemberBox"> <button id="addMember">'
						+ '<i class="material-icons">person_add</i> Add Member</button><br><br>'
						+ '<button id="close">Close</button>'
						+ '</div>');

				var $membersList = $('#members');

				$.get('/conversation_users/' + convID + '/').done(function (data) {
					for (var u in data['users']) {
						$('#members').append('<div class="member" data-username="'
								+ data['users'][u]['username'] + '">' + data['users'][u]['username']
								+ ' <button class="deleteMember iconOnly transparent">'
								+ '<i class="material-icons">clear</i></button></div>');
					}
				});

				$('#addMember').click(function () {
					var usernameToAdd = $('#addMemberBox').val();

					$.ajax({
						url: '/conversation_users/' + convID + '/',
						method: 'PUT',
						data: {
							username: usernameToAdd
						}
					}).done(function (data) {
						$.get('/conversation_users/' + convID + '/').done(function (data) {
							$membersList.html('');
							for (var u in data['users']) {
								$membersList.append('<div class="member" data-username="'
										+ data['users'][u]['username'] + '">' + data['users'][u]['username']
										+ ' <button class="deleteMember iconOnly"><i class="material-icons">delete</i></button></div>');
							}
						});
					});
				});

				$body.on('click', '.deleteMember', function () {
					$.ajax({
						url: '/conversation_users/' + convID + '/',
						method: 'DELETE',
						data: {
							username: $(this).parent().data('username')
						}
					}).done(function (data) {
						$.get('/conversation_users/' + convID + '/').done(function (data) {
							$membersList.html('');
							for (var u in data['users']) {
								if (data['users'].length > 1) {
									$membersList.append('<div class="member" data-username="'
											+ data['users'][u]['username'] + '">' + data['users'][u]['username']
											+ ' <button class="deleteMember">Delete</button></div>');
								} else {
									$membersList.append('<div class="member" data-username="'
											+ data['users'][u]['username'] + '">' + data['users'][u]['username']
											+ '</div>');
								}
							}
						});
					});
				});

				$('#close').click(function () {
					$('#modal').fadeOut('fast', function () {
						$(this).remove();
					});
					$('#modalBackground').fadeOut('fast', function () {
						$(this).remove();
					});
				});
			});

			$('#toggleCanvas').click(function () {
				if ($drawPanel.css('left') != '0px') {
					$drawPanel.animate({left: 0});
					$(this).text('View Messages');
					$drawPanel.focus();
				} else {
					$drawPanel.animate({left: '100%'});
					$(this).text('Draw');
				}
			});

			$(window).resize(function () {
				if (window.innerWidth > 1040) {
					$drawPanel.css({left: '50%'});
				} else {
					if ($drawPanel.css('left') != '0px') {
						$drawPanel.css({left: '100%'});
					}
				}
			});

			// -----------------

			$brushSizeRange.change();

			socket.emit('addUser', #{user.id});

			refreshMessages(true);

			if (Notification.permission !== 'denied' && Notification.permission !== 'granted') {
				Notification.requestPermission();
			}

			socket.on('newMessage', function (data) {
				var rawDate = data['createdAt'];
				var formattedDate = moment(rawDate).format("h:mm A; MMMM D");

				displayMessage(authors[data['UserId']]['username'], data['imageData'], formattedDate);

				if (!document.hasFocus()) {
					if (Notification.permission === 'granted') {
						// TODO: Notification toggle
						var notification = new Notification(authors[data['UserId']]['username'] + ' sent a sketch!');
					} else if (Notification.permission !== 'denied') {
						Notification.requestPermission(function (permission) {
							var notification = new Notification(authors[data['UserId']]['username'] + ' sent a sketch!');
						});
					}
				}
			});
		});


block content
	img#cursor(width='100', height='57', src='/images/cursor.png')
	button#toggleCanvas Draw

	div#conversation
		section#messages
			header
				h1
					span#convName
					div#controls
						button#changeName.transparent
							i.material-icons edit
							span Change Name
						button#editMembers.transparent
							i.material-icons people
							span Members
			section#messagesContainer

		section#drawPanel
			canvas#drawCanvas(height='320', width='480')

			div#commands
				div(style='float: left;')
					button#stampIt
						i.material-icons image
						span Stamp It!
				div(style='float: right;')
					button#clear.iconOnly.transparent.big
						i.material-icons clear
					button#send.iconOnly.transparent.big
						i.material-icons send

			div#tools
				ul#colors
					li#white.colorTool
					li#grey.colorTool
					li#black.colorTool
					li#red.colorTool.active
					li#hotPink.colorTool
					li#yellow.colorTool
					li#blue.colorTool
					li#green.colorTool

				ul#images
					li#dolphin.big.stampTool
						img(src='/images/dolphin.png')
					li#hand.big.stampTool
						img(src='/images/hand.png')
					li#pizza.big.stampTool
						img(src='/images/pizza.png')
					li#gabe.big.stampTool
						img(src='/images/gabe.png')
					li#hotswap.big.stampTool
						img(src='/images/sciencerules.png')
					li#hotkey.big
						i.material-icons collections

				div#brushSize
					h3 Brush Size
					input#brushSizeRange(type='range', min='1', max='100', value='10')
