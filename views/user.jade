extends base.jade

block vars
	- var footer = false
	- var page = 'user'

block scripts
	script(type='text/javascript').
		$(function () {
			var $avatar = $('#avatar');
			var $avatarCanvas = $('#avatarCanvas');

			var $brushSizeRange = $('#brushSizeRange');

			var editing = false;
			var hover = false;

			var active = true;

			window.setInterval(function () {
				if (active) {
					// Keep session alive
					$.get('/keepalive/', {id: #{user.id}}).fail(function () {
						// User was logged out due to inactivity.
						window.location = '/login/?redirect=%2Fusers%2F#{profile.id}';
					}.bind(this));
				}
			}, 20000);

			$('#avatarContainer').hide();

			$('#editAvatar').click(function () {
				editing = !editing;

				if(editing) {
					$(this).text('Save Changes');

					$('#avatarContainer').show();
					$avatar.hide();

					var drawCanvas = new SWCanvas('avatarCanvas');
					drawCanvas.frames[0].background.getContext('2d').drawImage($avatar[0], 0, 0);
					drawCanvas.drawBackground();
					window.requestAnimationFrame(drawCanvas.redraw.bind(drawCanvas));

					$('#main').scroll(function () {
						drawCanvas.updateCanvasOffset();
					});

					$avatarCanvas.on('mousedown', function (event) {
						drawCanvas.startPainting();
						drawCanvas.addPoint(drawCanvas.calculateMouse(event.pageX, event.pageY), false);
					});
					$avatarCanvas.on('touchstart', function (event) {
						var touch = event.originalEvent.touches[0] || event.originalEvent.changedTouches[0];
						drawCanvas.startPainting();
						drawCanvas.addPoint(drawCanvas.calculateMouse(touch.pageX, touch.pageY), false);
					});
					$avatarCanvas.on('mousemove', function (event) {
						if (drawCanvas.paint) {
							drawCanvas.addPoint(drawCanvas.calculateMouse(event.pageX, event.pageY), true);
						}
					});
					$avatarCanvas.on('touchmove', function (event) {
						event.preventDefault();

						if (drawCanvas.paint) {
							var touch = event.originalEvent.touches[0] || event.originalEvent.changedTouches[0];

							drawCanvas.startPainting();
							drawCanvas.addPoint(drawCanvas.calculateMouse(touch.pageX, touch.pageY), true);
						}
					});

					var onMouseUp = function () {
						drawCanvas.stopPainting();
						drawCanvas.imageToBg(false);
					};

					$avatarCanvas.on('mouseup', onMouseUp);
					$avatarCanvas.on('touchend', function (event) {
						event.preventDefault();
						onMouseUp(event);
					});
					$avatarCanvas.on('mouseleave', function () {
						drawCanvas.stopPainting();
						hover = false;
					});

					$avatarCanvas.on('mouseenter', function () {
						hover = true;
					});

					$('.colorTool').click(function () {
						drawCanvas.updateBrush({
							tool: 'brush',
							color: $(this).css('backgroundColor')
						});

						$brushSizeRange.change(); // Refresh size, make sure it's correct

						$(this).parent().children('li').each(function () { $(this).removeClass('active'); });
						$(this).addClass('active');

						$(this).parent().parent().children('#images').children('li').each(function () {
							$(this).removeClass('active');
						});
					});
					$('.stampTool').click(function () {
						drawCanvas.updateBrush({
							tool: 'stamp',
							stamp: $(this).attr('id')
						});

						$brushSizeRange.change(); // Refresh size, make sure it's correct

						$(this).parent().children('li').each(function () { $(this).removeClass('active'); });
						$(this).addClass('active');

						$(this).parent().parent().children('#colors').children('li').each(function () {
							$(this).removeClass('active');
						});
					});

					$('#clear').click(function () {
						drawCanvas.clearAllCanvasData(true, false);
					});

					$brushSizeRange.on('input change', function () {
						drawCanvas.setBrushSize($(this).val());
					});

					$brushSizeRange.change();

					$(window).on('beforeunload', function (event) {
						onMouseUp(event);
					});
				} else {
					$.post('/users/#{profile.id}/avatar/', {
						imageData: $avatarCanvas[0].toDataURL()
					}, function (data) {
						// TODO: If success, update avatar + canvas
						$avatar.attr('src', $avatarCanvas[0].toDataURL());
					});
					$(this).text('Edit Avatar');
					$('#avatar').show();
					$('#avatarContainer').hide();
				}
			});
			$('#cancel').click(function () {
				editing = false;
				$('#editAvatar').text('Edit Avatar');
				$('#avatar').show();
				$('#avatarContainer').hide();
			});
		});

block content
	div#profile
		if profile.avatar
			img#avatar(src='#{profile.avatar}')
		else
			img#avatar

		div#avatarContainer
			form#formAvatar(style='display: none;')
				input#avatarData(type='hidden')

			canvas#avatarCanvas(height='768', width='768', style='width: 384px; height: 384px; margin-top: 0;')

			div#tools
				ul#colors
					li#white.colorTool
					li#grey.colorTool
					li#black.colorTool
					li#hotPink.colorTool
					li#red.colorTool.active
					li#orange.colorTool
					li#yellow.colorTool
					li#blue.colorTool
					li#green.colorTool

				ul#images
					li#dolphin.big.stampTool
						img(src='/images/dolphin.png')
					li#hand.big.stampTool
						img(src='/images/hand.png')
					li#pizza.big.stampTool
						img(src='/images/pizza.png')
					li#gabe.big.stampTool
						img(src='/images/gabe.png')

				div#brushSize
					h3 Brush Size
					input#brushSizeRange(type='range', min='1', max='100', value='10')

			div#avatarControls
				button#clear.transparent.big
					i.material-icons clear
					span Clear
				button#cancel.transparent.big
					i.material-icons cancel
					span Cancel

		-if(profile.id == user.id)
			br
			button#editAvatar Edit Avatar

		h1#name #{profile.username}
