extends base.jade

block vars
	- var footer = false

block scripts
	script(type='text/javascript').
		$(function () {
			var socket = io();

			var CURRENT_USER = {
				id: #{user.id}
			};

			var $body = $('body');
			var $conversations = $('#conversations');
			var $names = $('#names');
			var $conversationsMessage = $('#conversationsMessage');

			var active = true;

			$conversationsMessage.hide();

			window.setInterval(function () {
				if (active) {
					// Keep session alive
					$.get('/keepalive/', { id: CURRENT_USER.id }).fail(function () {
						// User was logged out due to inactivity.
						window.location = '/login/?redirect=%2Fconversations%2F';
					}.bind(this));
				}
			}, 20000);

			var reloadConversations = function () {
				$.get('/conversations_data/').done(function (data) {
					$conversations.html('');
					for (var c in data['conversations']) {
						if (data['conversations'].hasOwnProperty(c)) {
							var rawDate = data['conversations'][c]['lastMessage'];
							var formattedDate = moment(rawDate).format("h:mm A; dddd, MMMM D, YYYY");
							if (rawDate == null) {
								formattedDate = 'No posts yet.';
							}
							var users = data['users'][c];
							var userList = '';

							for (var u in data['users'][c]) {
								if (data['users'][c].hasOwnProperty(u)) {
									userList += '<div class="member"><div class="avatar">'
										+ '<img src="/users/' + data['users'][c][u]['id'] + '/avatar/thumb/">'
										+ '</div>';
									userList += '<a href="/users/' + data['users'][c][u]['id'] + '/">'
										+ data['users'][c][u]['username'] + '</a></div>';
									if (data['users'][c][u] !== data['users'][c][data['users'][c].length - 1]) {
										userList += ', ';
									}
								}
							}

							var conversationID = data['conversations'][c]['id'];

							var conversationHTML = '<li class="conversation'
								+ ((data['users'][c].length == 1) ? ' deletable' : '')
								+ '" data-id="' + conversationID
								+ '" id="conversation-'
								+ conversationID + '"><div class="link"><a href="/conversations/'
								+ conversationID + '/">' + data['conversations'][c]['name'] + '</a></div>'
								+ '<div class="date">Last message posted: ' + formattedDate + '</div>'
								+ '<div class="memberList"><strong>Members:</strong> '
								+ '<span class="members">' + userList + '</span></div> ';


							if (data['users'][c].length == 1) {
								conversationHTML += '<div class="controls">'
									+ '<button class="delete transparent iconOnly noMargin">'
									+ '<i class="material-icons">clear</i></button></div>';
							}

							conversationHTML += '</li>';

							$conversations.append(conversationHTML);
						}
					}

					if (data['conversations'].length == 0) {
						$conversationsMessage.show();
						$conversationsMessage.text('You are not currently in any conversations.');
					} else {
						$conversationsMessage.hide();
					}
				});
			};

			$conversations.append('<div class="loader" '
				+ 'style="position:absolute;left:50%;margin-left:-23px;margin-top:50px;"></div>');

			$names.select2({
				placeholder: {
					id: '-1', // the value of the option
					text: 'Select an option'
				},
				ajax: {
					url: '/users_search/',
					dataType: 'json',
					delay: 250,
					type: 'GET',
					data: function (params) {
						return {
							q: params.term,
							exclude_me: 'true'
						}
					},
					processResults: function (data) { // function (data, params) {
						// parse the results into the format expected by Select2
						// since we are using custom formatting functions we do not need to
						// alter the remote JSON data, except to indicate that infinite
						// scrolling can be used
						//params.page = params.page || 1;

						return {
							results: $.map(data.users, function (user) {
								return {
									text: user.username,
									id: user.id
								}
							})
							/*pagination: {
								more: (params.page * 30) < data.total_count
							}*/
						};
					},
					cache: true
				},
				templateResult: function (data) {
					if (data.id !== undefined) {
						return $('<span class="search-member"><div class="avatar"><img src="/users/'
							+ data.id + '/avatar/thumb/"></div><div class="name">'
							+ data.text + '</div></span>');
					}
					return $('<span class="search-member"><div class="avatar loading"></div><div class="name">'
						+ data.text + '</div></span>');
				},
				minimumInputLength: 1
			});

			$('#formCreateConversation').hide();

			$('#createConversation').click(function () {
				$('#formCreateConversation').slideDown();
			});
			$('#cancelConversation').click(function () {
				$('#formCreateConversation').slideUp();
			});

			$body.on('click', '.delete', function () {
				$body.append('<div id="modalBackground"></div>');
				$body.append('<div id="modal"><h1>Are you sure you want to delete conversation "'
					+ $(this).parent().parent().children('.link').first().children('a').first().text() + '"?</h1>'
					+ '<input type="hidden" id="toDelete" value="' + $(this).parent().parent().data('id') + '">'
					+ '<button id="confirmDelete">Yes</button> <button id="cancelDelete">No</button>'
					+ '</div>');

				$('#confirmDelete').click(function () {
					$.ajax({
						url: '/conversation/' + $(this).parent().children('#toDelete').first().val() + '/',
						method: 'DELETE'
					}).done(function (data) {
						// TODO: Check if delete was successful.
						$('#modal').fadeOut('fast', function () {
							$(this).remove();
						});
						$('#modalBackground').fadeOut('fast', function () {
							$(this).remove();
							reloadConversations();
						});
					});
				});
				$('#cancelDelete').click(function () {
					$('#modal').fadeOut('fast', function () {
						$(this).remove();
					});
					$('#modalBackground').fadeOut('fast', function () {
						$(this).remove();
					});
				});
			});

			// -----------------

			reloadConversations();

			socket.emit('userOnline');
			// TODO: Fix this, it doesn't work
			socket.on('newMessage', function (data) {
				reloadConversations();
			});
		});

block content
	h1
		span Conversations
		div#controls
			button#createConversation(type='button').transparent
				i.material-icons add
				span Create

	form#formCreateConversation(method='post', style='display: none;')
		input(type='hidden', name='_csrf', value='#{csrfToken}')

		label(for='names') Members
		select(name='names[]', id='names', class='js-basic-multiple', multiple='multiple', style='width: 400px')
		label(for='name') Conversation Name
		input(type='text', name='name', id='name')
		br
		br
		button(type='submit', style='margin-right: 0.2rem')
			i.material-icons add
			span Create
		button(type='button', id='cancelConversation').transparent Cancel

	ul#conversations
	div#conversationsMessage
